Time Complexity: O(N + sqrt(M))
Space Complexity: O(1)

class Solution {
    public int diagonalPrime(int[][] nums) {
        int n = nums.length;
        int count = 0;

        for(int i=0; i<nums.length; i++){
            if(isPrime(nums[i][i])) {
                count = Math.max(count, nums[i][i]);
            }
            if(isPrime(nums[i][n-i-1])){
                count = Math.max(count, nums[i][n-i-1]);
            }
        }
        return count ;
    }
    private boolean isPrime(int num){
        if(num < 2) return false;
        for(int i=2; i*i<= num; i++){
            if(num % i == 0) return false;
        }
        return true;
    }
}
